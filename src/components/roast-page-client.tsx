
"use client";

import React, { useState, useEffect, useMemo, ChangeEvent } from 'react';
import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { generateRoast, type GenerateRoastInput } from '@/ai/flows/generate-roast';
import { generateSocialRoast, type GenerateSocialRoastInput } from '@/ai/flows/generate-social-roast';
import { generateImageRoast, type GenerateImageRoastInput } from '@/ai/flows/generate-image-roast';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Separator } from '@/components/ui/separator';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Checkbox } from "@/components/ui/checkbox";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Flame, Info, Sparkles, Bot, Settings as SettingsIcon, FilePlus2, ShieldAlert, Scale, Share2, Copy, User, Heart, Download, Users, Image as ImageIcon, AlertTriangle, Clock } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { Textarea } from '@/components/ui/textarea';
import PolicyModal from '@/components/policy-modal';
import AppFooter from '@/components/app-footer';

// Translations
const translations = {
  en: {
    settings: "Settings",
    language: "Language",
    theme: "Theme",
    light: "Light",
    dark: "Dark",
    english: "English",
    spanish: "Spanish",
    pageTitle: "RoastAI",
    pageSubtitle: "Crafting personalized roasts with a touch of AI savagery.",
    
    tabDescribeTarget: "Describe Target",
    tabSocialProfile: "Social Profile",

    cardTitleManual: "Describe Your Target",
    cardDescriptionManual: "The more details, the spicier the roast. The AI is hungry for info!",
    nameLabel: "Name",
    namePlaceholder: "e.g., John Doe",
    occupationLabel: "Occupation",
    occupationPlaceholder: "e.g., Software Developer",
    hobbiesLabel: "Hobbies",
    hobbiesPlaceholder: "e.g., Arguing with AI all day",
    quirksLabel: "Quirks / Unusual Habits",
    quirksPlaceholder: "e.g., Thinks pineapple belongs on pizza",
    extrasLabel: "Extras",
    extrasPlaceholder: "e.g., Anything else to make the roast more specific",

    cardTitleSocial: "Roast by Social Media Profile",
    cardDescriptionSocial: "Let the AI roast based on a social media persona.",
    platformLabel: "Social Media Platform",
    platformPlaceholder: "Select a platform",
    instagram: "Instagram",
    twitter: "Twitter/X",
    tiktok: "TikTok",
    other: "Other",
    socialUsernameLabel: "Username",
    socialUsernamePlaceholder: "e.g., @coolroastee123",
    socialBioLabel: "Biography",
    socialBioPlaceholder: "Copy and paste their bio here...",

    premiumFeatureTitle: "Premium: Roast by Profile Picture",
    premiumFeatureDescription: "Upload a profile picture for an AI-powered analysis to fuel the roast! This feature conceptually uses a model like CLIP.",
    uploadImageLabel: "Upload Profile Picture",
    imagePreviewLabel: "Image Preview",
    generateImageRoastButton: "Generate Roast from Image",
    acceptTermsRequiredForImageRoast: "Please accept terms in the form above to use this feature.",
    imageRoastFeatureNote: "Note: Image roasts are limited to one per 8 hours.",
    imageRoastRateLimitActiveTitle: "Image Roast Cooldown",
    imageRoastRateLimitActiveDescription: "You're on a cooldown! Try again in {hours}h {minutes}m.",


    intensityLabel: "Roast Intensity",
    intensityWarningTitle: "Heads Up, Daredevil!",
    intensityWarningDescription: "Intensity levels {intensity}+ can get... spicy. The AI might forget its manners. Proceed with a thick skin and a good sense of humor!",
    generateButton: "Generate Roast",
    generatingButton: "Roasting...",
    exampleButton: "Show Example",
    aiVerdictTitle: "The AI's Verdict",
    privacyTitle: "Privacy Note",
    privacyDescription: "Your information is used solely to generate this roast and is not stored or shared. The AI has a terrible memory anyway (unless it's for holding grudges).",
    footerText: "¬© {year} RoastAI. All roasts generated by AI, blame the bots.",
    toastRoastServedTitle: "Roast Served!",
    toastRoastServedDescription: "The AI has spoken. Prepare for impact.",
    toastRoastFailedTitle: "Roast Failed",
    toastImageRoastFailedTitle: "Image Roast Failed",
    toastExampleLoadedTitle: "Example Loaded!",
    toastExampleLoadedDescription: "Form populated with sample data. Feel free to edit!",
    nameRequired: "Name is required, even if it's made up!",
    occupationRequired: "What do they pretend to do all day?",
    hobbiesRequired: "Tell us their questionable pastimes.",
    quirksRequired: "Everyone has them. Spill the beans!",
    platformRequired: "Which platform are they on?",
    usernameRequired: "What's their social media handle?",
    bioRequired: "A bio is needed to get the roast juices flowing!",
    aiCoffeeBreakError: "The AI is currently on a coffee break. Try again shortly.",
    settingsDescription: "Adjust your application preferences.",
    exampleManual: {
      name: 'Sir Reginald Featherbottom III',
      occupation: 'Professional Pigeon Chaser',
      hobbies: 'Collecting rare socks, competitive cheese rolling',
      quirks: 'Believes squirrels are government spies, only eats food that is orange',
      extras: 'Always wears a monocle, has a pet rock named Bartholomew',
    },
    exampleSocial: {
      platform: 'Instagram',
      username: '@InstaFamousWannabe',
      biography: 'üåü Living my best life ü§≥ | ‚úàÔ∏è Wanderlust | ‚ú® Influencer in the making | üê∂ Dog Mom | üëá DM for collabs üëá',
    },
    privacyPolicyTitle: "Privacy Policy",
    legalNoticeTitle: "Legal Notice & Disclaimer",
    privacyPolicyButton: "Privacy Policy",
    legalNoticeButton: "Legal Notice & Disclaimer",
    acceptTermsLabelPart1: "I have read and agree to the ",
    acceptTermsLabelLink1: "Privacy Policy",
    acceptTermsLabelPart2: " and the ",
    acceptTermsLabelLink2: "Legal Notice & Disclaimer",
    acceptTermsRequired: "You must accept the terms and conditions to continue.",
    lastUpdated: "Last updated: May 10, 2025",
    closeButton: "Close",
    privacyPolicyContent: `...`, 
    legalNoticeContent: `...`, 
    shareButtonText: "Share",
    copyButtonText: "Copy",
    copiedToastTitle: "Copied!",
    copiedToastDescription: "Roast copied to clipboard.",
    shareSuccessTitle: "Shared!",
    shareSuccessDescription: "Roast shared successfully.",
    shareFailedToastTitle: "Share Failed",
    shareFailedToastDescription: "Could not share the roast. It has been copied to your clipboard instead.",
    copyFailedTitle: "Copy Failed",
    copyFailedDescription: "Could not copy the roast.",
    aboutMeButton: "Who am I",
    aboutMeModalTitle: "About the Creator",
    aboutMeModalContent: "I'm a 14-year-old teenager. This is my first website, so don't look down on it! You can contact me (even to criticize me a little, eh) at carlosroman3141@gmail.com.",
    supportWithPayPalButton: "Support with PayPal",
    downloadSourceButton: "Download Source Code",
    downloadSourceDescription: "Download the project's source code as a ZIP file.",
  },
  es: {
    settings: "Ajustes",
    language: "Idioma",
    theme: "Tema",
    light: "Claro",
    dark: "Oscuro",
    english: "Ingl√©s",
    spanish: "Espa√±ol",
    pageTitle: "RoastAI IA",
    pageSubtitle: "Creando roasts personalizados con un toque de salvajismo IA.",

    tabDescribeTarget: "Describir Objetivo",
    tabSocialProfile: "Perfil Social",

    cardTitleManual: "Describe a tu victima",
    cardDescriptionManual: "Cuantos m√°s detalles, m√°s picante el roast. ¬°La IA tiene hambre de informaci√≥n!",
    nameLabel: "Nombre",
    namePlaceholder: "Ej: Carlos",
    occupationLabel: "Ocupaci√≥n",
    occupationPlaceholder: "Ej: estudiante",
    hobbiesLabel: "Pasatiempos",
    hobbiesPlaceholder: "Ej: hablar con una IA todo el d√≠a",
    quirksLabel: "Man√≠as / H√°bitos Inusuales",
    quirksPlaceholder: "Ej: me muerdo las u√±as",
    extrasLabel: "Extras",
    extrasPlaceholder: "Ej: m√°s datos para hacerlo m√°s completo",

    cardTitleSocial: "Roast por Perfil de Red Social",
    cardDescriptionSocial: "Deja que la IA haga un roast basado en un perfil de redes sociales.",
    platformLabel: "Plataforma de Red Social",
    platformPlaceholder: "Selecciona una plataforma",
    instagram: "Instagram",
    twitter: "Twitter/X",
    tiktok: "TikTok",
    other: "Otra",
    socialUsernameLabel: "Nombre de Usuario",
    socialUsernamePlaceholder: "Ej: @el_rostizado_maestro",
    socialBioLabel: "Biograf√≠a",
    socialBioPlaceholder: "Copia y pega su biograf√≠a aqu√≠...",

    premiumFeatureTitle: "Premium: Roast por Foto de Perfil",
    premiumFeatureDescription: "¬°Sube una foto de perfil para un an√°lisis por IA que alimente el roast! Esta funci√≥n utiliza conceptualmente un modelo como CLIP.",
    uploadImageLabel: "Subir Foto de Perfil",
    imagePreviewLabel: "Vista Previa de Imagen",
    generateImageRoastButton: "Generar Roast desde Imagen",
    acceptTermsRequiredForImageRoast: "Por favor, acepta los t√©rminos en el formulario de arriba para usar esta funci√≥n.",
    imageRoastFeatureNote: "Nota: Los roasts de imagen est√°n limitados a uno cada 8 horas.",
    imageRoastRateLimitActiveTitle: "Enfriamiento de Roast de Imagen",
    imageRoastRateLimitActiveDescription: "¬°Est√°s en enfriamiento! Int√©ntalo de nuevo en {hours}h {minutes}m.",


    intensityLabel: "Intensidad del Roast",
    intensityWarningTitle: "¬°Cuidado, Temerario!",
    intensityWarningDescription: "Niveles de intensidad {intensity}+ pueden ponerse... picantes. La IA podr√≠a olvidar sus modales. ¬°Procede con piel gruesa y buen sentido del humor!",
    generateButton: "Generar Roast",
    generatingButton: "Asando...",
    exampleButton: "Mostrar Ejemplo",
    aiVerdictTitle: "El Veredicto de la IA",
    privacyTitle: "Nota de Privacidad",
    privacyDescription: "Tu informaci√≥n se usa √∫nicamente para generar este roast y no se almacena ni comparte. De todas formas, la IA tiene una memoria terrible (a menos que sea para guardar rencores).",
    footerText: "¬© {year} RoastAI IA. Todos los roasts generados por IA, culpa a los bots.",
    toastRoastServedTitle: "¬°Roast Servido!",
    toastRoastServedDescription: "La IA ha hablado. Prep√°rate para el impacto.",
    toastRoastFailedTitle: "Roast Fallido",
    toastImageRoastFailedTitle: "Roast de Imagen Fallido",
    toastExampleLoadedTitle: "¬°Ejemplo Cargado!",
    toastExampleLoadedDescription: "Formulario rellenado con datos de muestra. ¬°Si√©ntete libre de editar!",
    nameRequired: "¬°El nombre es obligatorio, aunque sea inventado!",
    occupationRequired: "¬øA qu√© fingen dedicarse todo el d√≠a?",
    hobbiesRequired: "Cu√©ntanos sus dudosos pasatiempos.",
    quirksRequired: "Todos los tienen. ¬°Suelta la sopa!",
    platformRequired: "¬øEn qu√© plataforma est√°?",
    usernameRequired: "¬øCu√°l es su usuario en redes sociales?",
    bioRequired: "¬°Se necesita una biograf√≠a para que el roast fluya!",
    aiCoffeeBreakError: "La IA est√° actualmente en una pausa para el caf√©. Int√©ntalo de nuevo en breve.",
    settingsDescription: "Ajusta las preferencias de tu aplicaci√≥n.",
    exampleManual: {
      name: 'Don Reginaldo Pluma Suelta III',
      occupation: 'Perseguidor Profesional de Palomas',
      hobbies: 'Coleccionar calcetines raros, rodar queso competitivamente',
      quirks: 'Cree que las ardillas son esp√≠as del gobierno, solo come comida naranja',
      extras: 'Siempre lleva un mon√≥culo, tiene una piedra mascota llamada Bartolom√©',
    },
    exampleSocial: {
      platform: 'Instagram',
      username: '@QuieroSerFamosoYa',
      biography: 'üåü Viviendo mi mejor vida ü§≥ | ‚úàÔ∏è Esp√≠ritu viajero | ‚ú® Futuro influencer | üê∂ Madre de perros | üëá MD para colaboraciones üëá',
    },
    privacyPolicyTitle: "Pol√≠tica de Privacidad",
    legalNoticeTitle: "Aviso Legal y Responsabilidad",
    privacyPolicyButton: "Pol√≠tica de Privacidad",
    legalNoticeButton: "Aviso Legal y Responsabilidad",
    acceptTermsLabelPart1: "He le√≠do y acepto la ",
    acceptTermsLabelLink1: "Pol√≠tica de Privacidad",
    acceptTermsLabelPart2: " y el ",
    acceptTermsLabelLink2: "Aviso Legal y Responsabilidad",
    acceptTermsRequired: "Debes aceptar los t√©rminos y condiciones para continuar.",
    lastUpdated: "√öltima actualizaci√≥n: 10 de mayo del 2025",
    closeButton: "Cerrar",
    privacyPolicyContent: `...`, 
    legalNoticeContent: `...`, 
    shareButtonText: "Compartir",
    copyButtonText: "Copiar",
    copiedToastTitle: "¬°Copiado!",
    copiedToastDescription: "Roast copiado al portapapeles.",
    shareSuccessTitle: "¬°Compartido!",
    shareSuccessDescription: "Roast compartido con √©xito.",
    shareFailedToastTitle: "Error al Compartir",
    shareFailedToastDescription: "No se pudo compartir el roast. En su lugar, se ha copiado al portapapeles.",
    copyFailedTitle: "Error al Copiar",
    copyFailedDescription: "No se pudo copiar el roast.",
    aboutMeButton: "Qui√©n soy",
    aboutMeModalTitle: "Sobre el Creador",
    aboutMeModalContent: "Soy un adolescente de 14 a√±os. Este es mi primer sitio web, ¬°as√≠ que no lo menosprecies! Puedes contactar conmigo (incluso para criticarme tantito, eh) en carlosroman3141@gmail.com.",
    supportWithPayPalButton: "Apoyar con PayPal",
    downloadSourceButton: "Descargar C√≥digo Fuente",
    downloadSourceDescription: "Descarga el c√≥digo fuente del proyecto como un archivo ZIP.",
  }
};

type LanguageKey = keyof typeof translations;
type RoastType = 'manual' | 'social';

const PAYPAL_URL = "https://www.paypal.me/josueroman1870";
const EIGHT_HOURS_MS = 8 * 60 * 60 * 1000;
const LOCAL_STORAGE_IMAGE_ROAST_TIMESTAMP_KEY = 'roastai_image_roast_timestamp';


const getManualRoastFormSchema = (lang: LanguageKey) => {
  const t = translations[lang];
  return z.object({
    name: z.string().min(1, t.nameRequired),
    occupation: z.string().min(1, t.occupationRequired),
    hobbies: z.string().min(1, t.hobbiesRequired),
    quirks: z.string().min(1, t.quirksRequired),
    extras: z.string().optional(),
    intensity: z.number().min(1).max(10).default(5),
    language: z.enum(['en', 'es']).default(lang as 'en' | 'es'),
    acceptTerms: z.boolean().refine(val => val === true, { message: t.acceptTermsRequired }),
  });
}
type ManualRoastFormValues = z.infer<ReturnType<typeof getManualRoastFormSchema>>;

const getSocialRoastFormSchema = (lang: LanguageKey) => {
  const t = translations[lang];
  return z.object({
    platform: z.string().min(1, t.platformRequired),
    socialUsername: z.string().min(1, t.usernameRequired),
    socialBio: z.string().min(1, t.bioRequired),
    intensity: z.number().min(1).max(10).default(5),
    language: z.enum(['en', 'es']).default(lang as 'en' | 'es'),
    acceptTerms: z.boolean().refine(val => val === true, { message: t.acceptTermsRequired }),
  });
}
type SocialRoastFormValues = z.infer<ReturnType<typeof getSocialRoastFormSchema>>;


const getDefaultManualValues = (lang: LanguageKey): ManualRoastFormValues => ({
  name: '', occupation: '', hobbies: '', quirks: '', extras: '',
  intensity: 5, language: lang, acceptTerms: false,
});

const getDefaultSocialValues = (lang: LanguageKey): SocialRoastFormValues => ({
  platform: '', socialUsername: '', socialBio: '',
  intensity: 5, language: lang, acceptTerms: false,
});

const getExampleManualValues = (lang: LanguageKey): ManualRoastFormValues => ({
  ...translations[lang].exampleManual,
  intensity: 7, language: lang, acceptTerms: true,
});

const getExampleSocialValues = (lang: LanguageKey): SocialRoastFormValues => ({
  ...translations[lang].exampleSocial,
  intensity: 7, language: lang, acceptTerms: true,
});


export default function RoastPageClient() {
  const [roastResult, setRoastResult] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const [language, setLanguage] = useState<LanguageKey>('en');
  const [theme, setTheme] = useState<'dark' | 'light'>('dark');
  const [activeTab, setActiveTab] = useState<RoastType>('manual');

  const [isPrivacyModalOpen, setIsPrivacyModalOpen] = useState(false);
  const [isLegalModalOpen, setIsLegalModalOpen] = useState(false);
  const [isAboutMeModalOpen, setIsAboutMeModalOpen] = useState(false);

  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [isLoadingImageRoast, setIsLoadingImageRoast] = useState(false);
  const [isImageRoastRateLimited, setIsImageRoastRateLimited] = useState(false);


  useEffect(() => {
    if (typeof navigator !== 'undefined') {
        const browserLang = navigator.language.split('-')[0] as LanguageKey;
        if (translations[browserLang]) {
            setLanguage(browserLang);
        }
    }
    // Privacy and Legal content injection
    const currentLang = typeof navigator !== 'undefined' && translations[navigator.language.split('-')[0] as LanguageKey] ? navigator.language.split('-')[0] as LanguageKey : 'en';
    const privacyPolicyContent = currentLang === 'es' ? 
    `Tu privacidad es importante para nosotros. Este sitio web ("nosotros") no almacena, comparte ni vende la informaci√≥n personal que los usuarios introducen en los formularios. Los datos que ingresas se utilizan √∫nicamente para generar contenido usando inteligencia artificial, y no se guardan en nuestros servidores.

Datos recopilados

Formulario de descripci√≥n: El contenido que escribes se env√≠a directamente a la IA para generar un mensaje ("roast"). No se almacena en ninguna base de datos.

Datos t√©cnicos: Podemos usar herramientas como Google Analytics para entender c√≥mo los usuarios interact√∫an con el sitio, pero estos datos son an√≥nimos.

Uso de cookies

Actualmente no utilizamos cookies propias para personalizar tu experiencia. En caso de hacerlo en el futuro, se actualizar√° esta pol√≠tica.

Seguridad

Hacemos todo lo posible por mantener este sitio seguro, pero no podemos garantizar una protecci√≥n total (nadie lo puede hacer) frente a vulnerabilidades externas.` 
    : 
    `Your privacy is important to us. This website ("us", "we", or "our") does not store, share, or sell the personal information that users enter into the forms. The data you input is used solely to generate content using artificial intelligence and is not saved on our servers.

Data Collected

Description Form: The content you write is sent directly to the AI to generate a message ("roast"). It is not stored in any database.

Technical Data: We may use tools like Google Analytics to understand how users interact with the site, but this data is anonymous.

Use of Cookies

We do not currently use our own cookies to personalize your experience. If we do so in the future, this policy will be updated.

Security

We do our best to keep this site secure, but we cannot guarantee total protection (no one can) against external vulnerabilities.`;

    const legalNoticeContent = currentLang === 'es' ?
    `Este sitio utiliza inteligencia artificial para generar contenido humor√≠stico o sarc√°stico ("roasts"). El contenido puede ser ofensivo, especialmente si se aumenta el nivel de creatividad (temperatura).

No nos hacemos responsables del uso indebido de los resultados generados.

El sitio es solo con fines de entretenimiento. No debe tomarse como consejo personal, psicol√≥gico o profesional.

Al usar este sitio, aceptas que el contenido generado es responsabilidad del usuario que lo solicit√≥.`
    :
    `This site uses artificial intelligence to generate humorous or sarcastic content ("roasts"). The content can be offensive, especially if the creativity level (temperature) is increased.

We are not responsible for the misuse of the generated results.

The site is for entertainment purposes only. It should not be taken as personal, psychological, or professional advice.

By using this site, you agree that the generated content is the responsibility of the user who requested it.`;
    
    translations.en.privacyPolicyContent = privacyPolicyContent;
    translations.es.privacyPolicyContent = privacyPolicyContent;
    translations.en.legalNoticeContent = legalNoticeContent;
    translations.es.legalNoticeContent = legalNoticeContent;

  }, []);
  
  const T = useMemo(() => translations[language], [language]);
  const manualRoastFormSchema = useMemo(() => getManualRoastFormSchema(language), [language]);
  const socialRoastFormSchema = useMemo(() => getSocialRoastFormSchema(language), [language]);

  const manualForm = useForm<ManualRoastFormValues>({
    resolver: zodResolver(manualRoastFormSchema),
    defaultValues: useMemo(() => getDefaultManualValues(language), [language]),
  });
  
  const socialForm = useForm<SocialRoastFormValues>({
    resolver: zodResolver(socialRoastFormSchema),
    defaultValues: useMemo(() => getDefaultSocialValues(language), [language]),
  });
  
  useEffect(() => {
    const currentManualAcceptTerms = manualForm.getValues('acceptTerms');
    const newManualDefaults = getDefaultManualValues(language);
    manualForm.reset({ ...newManualDefaults, language, acceptTerms: currentManualAcceptTerms });

    const currentSocialAcceptTerms = socialForm.getValues('acceptTerms');
    const newSocialDefaults = getDefaultSocialValues(language);
    socialForm.reset({ ...newSocialDefaults, language, acceptTerms: currentSocialAcceptTerms });

  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [language, manualForm.reset, socialForm.reset]);


  const currentManualIntensity = manualForm.watch('intensity');
  const [displayManualIntensity, setDisplayManualIntensity] = useState(manualForm.getValues('intensity')); 
  useEffect(() => { setDisplayManualIntensity(currentManualIntensity); }, [currentManualIntensity]);

  const currentSocialIntensity = socialForm.watch('intensity');
  const [displaySocialIntensity, setDisplaySocialIntensity] = useState(socialForm.getValues('intensity'));
  useEffect(() => { setDisplaySocialIntensity(currentSocialIntensity); }, [currentSocialIntensity]);


  useEffect(() => {
    document.documentElement.classList.toggle('dark', theme === 'dark');
  }, [theme]);

  // Effect to check image roast rate limit status
  useEffect(() => {
    if (activeTab === 'social' && typeof window !== 'undefined') {
      const lastRoastTimestampStr = localStorage.getItem(LOCAL_STORAGE_IMAGE_ROAST_TIMESTAMP_KEY);
      if (lastRoastTimestampStr) {
        const lastRoastTimestamp = parseInt(lastRoastTimestampStr, 10);
        const currentTime = new Date().getTime();
        if (currentTime < lastRoastTimestamp + EIGHT_HOURS_MS) {
          setIsImageRoastRateLimited(true);
        } else {
          setIsImageRoastRateLimited(false);
          localStorage.removeItem(LOCAL_STORAGE_IMAGE_ROAST_TIMESTAMP_KEY); // Clean up expired timestamp
        }
      } else {
        setIsImageRoastRateLimited(false);
      }
    } else {
      setIsImageRoastRateLimited(false); // Reset if tab is not social
    }
  }, [activeTab, selectedImage]); // Re-check when tab or selected image changes to update button state


  const handleManualSubmit: SubmitHandler<ManualRoastFormValues> = async (data) => {
    setIsLoading(true);
    setRoastResult(null);
    try {
      const submissionData: GenerateRoastInput = { ...data };
      const result = await generateRoast(submissionData);
      setRoastResult(result.roast);
      toast({ title: T.toastRoastServedTitle, description: T.toastRoastServedDescription });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : T.aiCoffeeBreakError;
      toast({ variant: "destructive", title: T.toastRoastFailedTitle, description: errorMessage });
    } finally {
      setIsLoading(false);
    }
  };

  const handleSocialSubmit: SubmitHandler<SocialRoastFormValues> = async (data) => {
    setIsLoading(true);
    setRoastResult(null);
    try {
      const submissionData: GenerateSocialRoastInput = {
        platform: data.platform,
        username: data.socialUsername,
        biography: data.socialBio,
        intensity: data.intensity,
        language: data.language,
      };
      const result = await generateSocialRoast(submissionData);
      setRoastResult(result.roast);
      toast({ title: T.toastRoastServedTitle, description: T.toastRoastServedDescription });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : T.aiCoffeeBreakError;
      toast({ variant: "destructive", title: T.toastRoastFailedTitle, description: errorMessage });
    } finally {
      setIsLoading(false);
    }
  };

  const handleImageSelect = (event: ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      setSelectedImage(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result as string);
      };
      reader.readAsDataURL(file);
    } else {
      setSelectedImage(null);
      setImagePreview(null);
    }
  };

  const handleImageRoastSubmit = async () => {
    const currentSocialFormValues = socialForm.getValues();
    if (!imagePreview || !currentSocialFormValues.acceptTerms) {
      if(!currentSocialFormValues.acceptTerms) {
        toast({ variant: "destructive", title: T.toastRoastFailedTitle, description: T.acceptTermsRequiredForImageRoast });
      }
      return;
    }

    const currentTime = new Date().getTime();
    if (typeof window !== 'undefined') {
        const lastRoastTimestampStr = localStorage.getItem(LOCAL_STORAGE_IMAGE_ROAST_TIMESTAMP_KEY);
        if (lastRoastTimestampStr) {
            const lastRoastTimestamp = parseInt(lastRoastTimestampStr, 10);
            if (currentTime < lastRoastTimestamp + EIGHT_HOURS_MS) {
                const remainingTime = (lastRoastTimestamp + EIGHT_HOURS_MS) - currentTime;
                const hours = Math.floor(remainingTime / (1000 * 60 * 60));
                const minutes = Math.floor((remainingTime % (1000 * 60 * 60)) / (1000 * 60));
                toast({
                    variant: "destructive",
                    title: T.imageRoastRateLimitActiveTitle,
                    description: T.imageRoastRateLimitActiveDescription.replace('{hours}', hours.toString()).replace('{minutes}', minutes.toString()),
                });
                setIsImageRoastRateLimited(true);
                return;
            }
        }
    }
    
    setIsLoadingImageRoast(true);
    setRoastResult(null);
    try {
      const submissionData: GenerateImageRoastInput = {
        imageDataUri: imagePreview,
        intensity: currentSocialFormValues.intensity,
        language: currentSocialFormValues.language,
        acceptTerms: currentSocialFormValues.acceptTerms,
      };
      const result = await generateImageRoast(submissionData);
      setRoastResult(result.roast);
      toast({ title: T.toastRoastServedTitle, description: T.toastRoastServedDescription });
      if (typeof window !== 'undefined') {
        localStorage.setItem(LOCAL_STORAGE_IMAGE_ROAST_TIMESTAMP_KEY, currentTime.toString());
      }
      setIsImageRoastRateLimited(true); // Activate rate limit visual state
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : T.aiCoffeeBreakError;
      toast({ variant: "destructive", title: T.toastImageRoastFailedTitle, description: errorMessage });
      // Do not set rate limit if AI call fails
    } finally {
      setIsLoadingImageRoast(false);
    }
  };


  const handleShowExample = () => {
    if (activeTab === 'manual') {
      const exampleData = getExampleManualValues(language); 
      manualForm.reset(exampleData); 
      setDisplayManualIntensity(exampleData.intensity);
    } else {
      const exampleData = getExampleSocialValues(language);
      socialForm.reset(exampleData);
      setDisplaySocialIntensity(exampleData.intensity);
    }
    setRoastResult(null);
    setSelectedImage(null);
    setImagePreview(null);
    toast({ title: T.toastExampleLoadedTitle, description: T.toastExampleLoadedDescription });
  };
  
  const [currentYear, setCurrentYear] = useState('');
  useEffect(() => { setCurrentYear(new Date().getFullYear().toString()); }, []);

  const handleCopyToClipboard = () => {
    if (roastResult) {
      navigator.clipboard.writeText(roastResult)
        .then(() => toast({ title: T.copiedToastTitle, description: T.copiedToastDescription }))
        .catch(err => {
          console.error('Failed to copy: ', err);
          toast({ variant: "destructive", title: T.copyFailedTitle, description: T.copyFailedDescription });
        });
    }
  };

  const handleShare = async () => {
    if (roastResult) {
      if (navigator.share) {
        try {
          await navigator.share({
            title: T.pageTitle,
            text: roastResult,
            url: typeof window !== 'undefined' ? window.location.href : undefined,
          });
          toast({ title: T.shareSuccessTitle, description: T.shareSuccessDescription });
        } catch (error) {
          handleCopyToClipboard();
          toast({ variant: "destructive", title: T.shareFailedToastTitle, description: T.shareFailedToastDescription });
        }
      } else {
        handleCopyToClipboard();
        toast({ title: T.copiedToastTitle, description: "Share API not available. Roast copied to clipboard." });
      }
    }
  };


  return (
    <div className="container mx-auto min-h-screen max-w-3xl py-8 px-4 flex flex-col">
      <div className="absolute top-4 left-4 z-10">
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="icon" aria-label={T.settings}>
              <SettingsIcon className="h-5 w-5" />
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-64" align="start">
            <div className="grid gap-4">
              <div className="space-y-1">
                <h4 className="font-medium leading-none">{T.settings}</h4>
                <p className="text-sm text-muted-foreground">{T.settingsDescription}</p>
              </div>
              <div className="grid gap-3">
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor="language-select" className="text-sm">{T.language}</Label>
                  <Select
                    value={language}
                    onValueChange={(value: LanguageKey) => {
                        setLanguage(value);
                        manualForm.setValue('language', value); 
                        socialForm.setValue('language', value);
                    }}
                  >
                    <SelectTrigger id="language-select" className="col-span-2 h-9">
                      <SelectValue placeholder={T.language} />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="en">{T.english}</SelectItem>
                      <SelectItem value="es">{T.spanish}</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-3 items-center gap-4">
                  <Label htmlFor="theme-select" className="text-sm">{T.theme}</Label>
                  <RadioGroup value={theme} onValueChange={(value: 'light' | 'dark') => setTheme(value)} className="col-span-2 flex items-center space-x-2" id="theme-select">
                    <div className="flex items-center space-x-1"><RadioGroupItem value="light" id="theme-light" /><Label htmlFor="theme-light" className="text-sm font-normal cursor-pointer">{T.light}</Label></div>
                    <div className="flex items-center space-x-1"><RadioGroupItem value="dark" id="theme-dark" /><Label htmlFor="theme-dark" className="text-sm font-normal cursor-pointer">{T.dark}</Label></div>
                  </RadioGroup>
                </div>
                <Separator className="my-1" /> 
                <div className="grid gap-2">
                  <Label htmlFor="download-source-button" className="text-sm font-medium">{T.downloadSourceButton}</Label>
                  <p className="text-xs text-muted-foreground mb-1">{T.downloadSourceDescription}</p>
                  <Button id="download-source-button" variant="outline" size="sm" onClick={() => { window.location.href = '/api/download-source'; }}>
                    <Download className="mr-2 h-4 w-4" />{T.downloadSourceButton}
                  </Button>
                </div>
              </div>
            </div>
          </PopoverContent>
        </Popover>
      </div>

      <header className="mb-8 text-center mt-10"> 
        <div className="flex items-center justify-center mb-2">
          <Flame className="h-12 w-12 text-accent mr-2" />
          <h1 className="text-5xl font-bold">{T.pageTitle.substring(0, T.pageTitle.length-2)}<span className="text-accent">{T.pageTitle.substring(T.pageTitle.length-2)}</span></h1>
        </div>
        <p className="text-muted-foreground text-lg">{T.pageSubtitle}</p>
      </header>

      <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as RoastType)} className="w-full mb-8">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="manual" className="gap-1"> <User className="h-4 w-4"/> {T.tabDescribeTarget}</TabsTrigger>
          <TabsTrigger value="social" className="gap-1"> <Users className="h-4 w-4"/> {T.tabSocialProfile}</TabsTrigger>
        </TabsList>
        
        <TabsContent value="manual">
          <Card className="w-full shadow-2xl">
            <CardHeader>
              <CardTitle className="text-2xl">{T.cardTitleManual}</CardTitle>
              <CardDescription>{T.cardDescriptionManual}</CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...manualForm}>
                <form onSubmit={manualForm.handleSubmit(handleManualSubmit)} className="space-y-6">
                  <FormField control={manualForm.control} name="name" render={({ field }) => (<FormItem><FormLabel>{T.nameLabel}</FormLabel><FormControl><Input placeholder={T.namePlaceholder} {...field} /></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={manualForm.control} name="occupation" render={({ field }) => (<FormItem><FormLabel>{T.occupationLabel}</FormLabel><FormControl><Input placeholder={T.occupationPlaceholder} {...field} /></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={manualForm.control} name="hobbies" render={({ field }) => (<FormItem><FormLabel>{T.hobbiesLabel}</FormLabel><FormControl><Input placeholder={T.hobbiesPlaceholder} {...field} /></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={manualForm.control} name="quirks" render={({ field }) => (<FormItem><FormLabel>{T.quirksLabel}</FormLabel><FormControl><Input placeholder={T.quirksPlaceholder} {...field} /></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={manualForm.control} name="extras" render={({ field }) => (<FormItem><FormLabel className="flex items-center">{T.extrasLabel} <FilePlus2 className="h-4 w-4 ml-1 text-muted-foreground" /></FormLabel><FormControl><Textarea placeholder={T.extrasPlaceholder} {...field} /></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={manualForm.control} name="intensity" render={({ field }) => (<FormItem><FormLabel className="flex items-center">{T.intensityLabel} <Flame className="h-4 w-4 ml-1 text-accent" />: {displayManualIntensity}</FormLabel><FormControl><Slider min={1} max={10} step={1} defaultValue={[field.value]} onValueChange={(value) => { field.onChange(value[0]); setDisplayManualIntensity(value[0]);}} className="py-2"/></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={manualForm.control} name="language" render={({ field }) => (<FormItem className="hidden"><FormLabel>Language</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={manualForm.control} name="acceptTerms" render={({ field }) => (<FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 shadow"><FormControl><Checkbox checked={field.value} onCheckedChange={field.onChange}/></FormControl><div className="space-y-1 leading-none"><FormLabel className="text-sm font-normal">{T.acceptTermsLabelPart1}<Button variant="link" type="button" onClick={() => setIsPrivacyModalOpen(true)} className="p-0 h-auto text-accent hover:underline">{T.acceptTermsLabelLink1}</Button>{T.acceptTermsLabelPart2}<Button variant="link" type="button" onClick={() => setIsLegalModalOpen(true)} className="p-0 h-auto text-accent hover:underline">{T.acceptTermsLabelLink2}</Button>.</FormLabel><FormMessage /></div></FormItem>)} />
                  {currentManualIntensity >= 7 && (<Alert variant="destructive" className="bg-accent/10 border-accent text-accent-foreground"><Flame className="h-5 w-5 text-accent" /><AlertTitle className="font-semibold text-accent">{T.intensityWarningTitle}</AlertTitle><AlertDescription>{T.intensityWarningDescription.replace('{intensity}', String(currentManualIntensity))}</AlertDescription></Alert>)}
                  <div className="flex flex-col sm:flex-row gap-4 pt-4">
                    <Button type="submit" disabled={isLoading || !manualForm.formState.isValid} className="w-full sm:w-auto flex-grow bg-accent hover:bg-accent/90 text-accent-foreground">{isLoading ? (<><Sparkles className="mr-2 h-4 w-4 animate-spin" />{T.generatingButton}</>) : (<><Bot className="mr-2 h-4 w-4" />{T.generateButton}</>)}</Button>
                    <Button type="button" variant="outline" onClick={handleShowExample} disabled={isLoading} className="w-full sm:w-auto">{T.exampleButton}</Button>
                  </div>
                </form>
              </Form>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="social">
          <Card className="w-full shadow-2xl">
            <CardHeader>
              <CardTitle className="text-2xl">{T.cardTitleSocial}</CardTitle>
              <CardDescription>{T.cardDescriptionSocial}</CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...socialForm}>
                <form onSubmit={socialForm.handleSubmit(handleSocialSubmit)} className="space-y-6">
                  <FormField control={socialForm.control} name="platform" render={({ field }) => (<FormItem><FormLabel>{T.platformLabel}</FormLabel><Select onValueChange={field.onChange} defaultValue={field.value}><FormControl><SelectTrigger><SelectValue placeholder={T.platformPlaceholder} /></SelectTrigger></FormControl><SelectContent><SelectItem value="Instagram">{T.instagram}</SelectItem><SelectItem value="Twitter/X">{T.twitter}</SelectItem><SelectItem value="TikTok">{T.tiktok}</SelectItem><SelectItem value="Other">{T.other}</SelectItem></SelectContent></Select><FormMessage /></FormItem>)} />
                  <FormField control={socialForm.control} name="socialUsername" render={({ field }) => (<FormItem><FormLabel>{T.socialUsernameLabel}</FormLabel><FormControl><Input placeholder={T.socialUsernamePlaceholder} {...field} /></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={socialForm.control} name="socialBio" render={({ field }) => (<FormItem><FormLabel>{T.socialBioLabel}</FormLabel><FormControl><Textarea placeholder={T.socialBioPlaceholder} rows={3} {...field} /></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={socialForm.control} name="intensity" render={({ field }) => (<FormItem><FormLabel className="flex items-center">{T.intensityLabel} <Flame className="h-4 w-4 ml-1 text-accent" />: {displaySocialIntensity}</FormLabel><FormControl><Slider min={1} max={10} step={1} defaultValue={[field.value]} onValueChange={(value) => { field.onChange(value[0]); setDisplaySocialIntensity(value[0]); }} className="py-2"/></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={socialForm.control} name="language" render={({ field }) => (<FormItem className="hidden"><FormLabel>Language</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem>)} />
                  <FormField control={socialForm.control} name="acceptTerms" render={({ field }) => (<FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 shadow"><FormControl><Checkbox checked={field.value} onCheckedChange={field.onChange}/></FormControl><div className="space-y-1 leading-none"><FormLabel className="text-sm font-normal">{T.acceptTermsLabelPart1}<Button variant="link" type="button" onClick={() => setIsPrivacyModalOpen(true)} className="p-0 h-auto text-accent hover:underline">{T.acceptTermsLabelLink1}</Button>{T.acceptTermsLabelPart2}<Button variant="link" type="button" onClick={() => setIsLegalModalOpen(true)} className="p-0 h-auto text-accent hover:underline">{T.acceptTermsLabelLink2}</Button>.</FormLabel><FormMessage /></div></FormItem>)} />
                  {currentSocialIntensity >= 7 && (<Alert variant="destructive" className="bg-accent/10 border-accent text-accent-foreground"><Flame className="h-5 w-5 text-accent" /><AlertTitle className="font-semibold text-accent">{T.intensityWarningTitle}</AlertTitle><AlertDescription>{T.intensityWarningDescription.replace('{intensity}', String(currentSocialIntensity))}</AlertDescription></Alert>)}
                  <div className="flex flex-col sm:flex-row gap-4 pt-4">
                     <Button type="submit" disabled={isLoading || !socialForm.formState.isValid} className="w-full sm:w-auto flex-grow bg-accent hover:bg-accent/90 text-accent-foreground">{isLoading ? (<><Sparkles className="mr-2 h-4 w-4 animate-spin" />{T.generatingButton}</>) : (<><Bot className="mr-2 h-4 w-4" />{T.generateButton}</>)}</Button>
                    <Button type="button" variant="outline" onClick={handleShowExample} disabled={isLoading} className="w-full sm:w-auto">{T.exampleButton}</Button>
                  </div>
                </form>
              
                <Separator className="my-8" />

                <Card className="bg-muted/50">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <ImageIcon className="h-5 w-5 mr-2 text-primary" />
                      {T.premiumFeatureTitle}
                    </CardTitle>
                    <CardDescription>{T.premiumFeatureDescription} <span className="text-xs block mt-1 text-muted-foreground italic">{T.imageRoastFeatureNote}</span></CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {imagePreview && (
                      <div className="mt-2">
                        <Label>{T.imagePreviewLabel}</Label>
                        <div className="mt-2 flex justify-center">
                          <img src={imagePreview} alt="Selected preview" className="rounded-md border max-h-48 object-contain" data-ai-hint="user profile" />
                        </div>
                      </div>
                    )}
                    <FormItem> 
                      <FormLabel>{T.uploadImageLabel}</FormLabel>
                      <FormControl>
                        <Input
                          type="file"
                          accept="image/*"
                          onChange={handleImageSelect}
                          className="file:text-foreground border-border"
                        />
                      </FormControl>
                    </FormItem>
                    <Button
                      onClick={handleImageRoastSubmit}
                      disabled={!selectedImage || isLoadingImageRoast || isLoading || !socialForm.getValues('acceptTerms') || isImageRoastRateLimited}
                      className="w-full bg-primary hover:bg-primary/90 text-primary-foreground"
                    >
                      {isLoadingImageRoast ? (
                        <><Sparkles className="mr-2 h-4 w-4 animate-spin" />{T.generatingButton}</>
                      ) : isImageRoastRateLimited ? (
                        <><Clock className="mr-2 h-4 w-4" />{T.imageRoastRateLimitActiveTitle}</>
                      ) : (
                        <><Bot className="mr-2 h-4 w-4" />{T.generateImageRoastButton}</>
                      )}
                    </Button>
                    {!socialForm.getValues('acceptTerms') && selectedImage && (
                        <p className="text-xs text-destructive text-center">{T.acceptTermsRequiredForImageRoast}</p>
                    )}
                  </CardContent>
                </Card>
              </Form> 
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>


      {roastResult && (
        <Card className="w-full shadow-2xl animate-in fade-in-50 slide-in-from-bottom-10 duration-500">
          <CardHeader><CardTitle className="text-2xl flex items-center"><Sparkles className="h-6 w-6 mr-2 text-accent" /> {T.aiVerdictTitle}</CardTitle></CardHeader>
          <CardContent>
            <p className="text-lg whitespace-pre-wrap p-4 bg-background rounded-md border border-border shadow-inner">{roastResult}</p>
            <div className="mt-4 flex justify-end gap-2">
              {typeof navigator !== 'undefined' && navigator.share && (<Button variant="outline" onClick={handleShare}><Share2 className="mr-2 h-4 w-4" />{T.shareButtonText}</Button>)}
              <Button variant="outline" onClick={handleCopyToClipboard}><Copy className="mr-2 h-4 w-4" />{T.copyButtonText}</Button>
            </div>
          </CardContent>
        </Card>
      )}
      
      <Separator className="my-8" />

      <Alert className="mt-4 text-sm">
        <Info className="h-4 w-4" /><AlertTitle className="font-semibold">{T.privacyTitle}</AlertTitle><AlertDescription>{T.privacyDescription}</AlertDescription>
      </Alert>

      <PolicyModal isOpen={isPrivacyModalOpen} onClose={() => setIsPrivacyModalOpen(false)} title={T.privacyPolicyTitle} lastUpdated={T.lastUpdated} content={T.privacyPolicyContent} closeButtonText={T.closeButton} icon={<ShieldAlert className="h-6 w-6 mr-2 text-primary" />} />
      <PolicyModal isOpen={isLegalModalOpen} onClose={() => setIsLegalModalOpen(false)} title={T.legalNoticeTitle} content={T.legalNoticeContent} closeButtonText={T.closeButton} icon={<Scale className="h-6 w-6 mr-2 text-primary" />} />
      <PolicyModal isOpen={isAboutMeModalOpen} onClose={() => setIsAboutMeModalOpen(false)} title={T.aboutMeModalTitle} content={T.aboutMeModalContent} closeButtonText={T.closeButton} icon={<User className="h-6 w-6 mr-2 text-primary" />} />
      
      <div className="mt-auto pt-8">
        <AppFooter translations={{ privacyPolicyButton: T.privacyPolicyButton, legalNoticeButton: T.legalNoticeButton, aboutMeButton: T.aboutMeButton, supportWithPayPalButton: T.supportWithPayPalButton, footerText: T.footerText }} onOpenPrivacyModal={() => setIsPrivacyModalOpen(true)} onOpenLegalModal={() => setIsLegalModalOpen(true)} onOpenAboutMeModal={() => setIsAboutMeModalOpen(true)} payPalUrl={PAYPAL_URL} currentYear={currentYear}/>
      </div>
    </div>
  );
}
